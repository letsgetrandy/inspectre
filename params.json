{"name":"Specter","tagline":"Dead simple visual regression testing","body":"Specter\r\n=======\r\n\r\nSpecter is the automated visual regression testing framework that you've been\r\nwishing for.\r\n\r\nFor most other forms of software development there exist unit testing\r\nframeworks with which a developer can verify that new code does nothing to\r\nbreak existing code, but for the front-end (UI) developer, there are very few\r\ntools to test design and layout, and the ones that do exist are terribly\r\nclumsy. This has always resulted in a huge need for heavy manual testing and\r\nQA after changes are made, to ensure that a change in one place doesn't break\r\nsomething somewhere else.\r\n\r\nSpecter aims to change that. After you've built a page and you know it's right\r\nyou can set up a Specter test to prove that page, and each of its individual\r\ncomponents are correctly rendered. Specter will capture screenshots of the\r\nelements matching the selectors you specify, at all the screen dimensions you\r\ndesire. Then, just run your suite of Specter tests the next time you make a\r\nchange to ensure you haven't broken anything. If something _does_ break, you'll\r\nget a nice screenshot with the differences highlighted in red.\r\n\r\n\r\n### Requirements\r\n\r\nSpecter is a XUL application, so it needs Firefox or XULRunner in order to work.\r\n\r\n\r\n## Installation\r\n\r\nTo use Specter, just clone this repo and run `make` and `sudo make install`\r\nto link the binary into your path and make it executable.\r\n\r\n```\r\n$ git clone https://github.com/letsgetrandy/specter.git\r\n$ cd specter\r\n$ make\r\n$ sudo make install\r\n```\r\n\r\n## Usage\r\n\r\nCheck out the [demo](http://github.com/letsgetrandy/specter/tree/master/demo) for a full working example (run `specter demo` from the command line).\r\n\r\n\r\n### Quick Start\r\n\r\nCreate your test file(s). Eg:\r\n\r\n```javascript\r\nopen(\"http://www.google.com/\", function() {\r\n\r\n    test([960, 640, 320], function() {\r\n        capture(\"#header\", \"header\");\r\n        capture(\"#login\", \"login-box\");\r\n        capture(\"#footer\", \"footer\");\r\n    });\r\n\r\n    finish();\r\n});\r\n```\r\n\r\nThen, invoke specter on your tests. Specter can run a single test file:\r\n\r\n```bash\r\n$ specter tests/test-login.js\r\n```\r\n\r\nOr, multiple files:\r\n\r\n```bash\r\n$ specter tests/test-login.js tests/test-homepage.js tests/test-checkout.js\r\n```\r\n\r\nOr, it can recursively run every test file in a specified directory:\r\n\r\n```bash\r\n$ specter tests\r\n```\r\n\r\n\r\n### Baselines\r\n\r\nThe first time Specter captures a selector for a particular test, there is\r\nnothing to compare it to, so that capture becomes the _baseline_. After that,\r\nany time that selector is captured for that test, it will be compared to the\r\nbaseline.\r\n\r\nWhen you make an intentional change, you'll wish to update the baseline. You\r\ndo this with the `--rebase` option.\r\n\r\n```bash\r\n# update the baseline for the homepage tests\r\nspecter --rebase tests/test-homepage.js\r\n```\r\n\r\n\r\n## Configuration\r\n\r\nSpecter follows standard .rc file behavior.\r\n\r\n* Global defaults can be set in `/etc/specterrc`\r\n* User-level settings can be set in `~/.specterrc`\r\n* Project-level settings can be set within the project in a `.specterrc` file\r\nin the current working directory, or any directory above it.\r\n\r\n```bash\r\n$ cat .specterrc\r\n\r\n[paths]\r\ntestroot = static/styles/tests\r\nbaseline = static/styles/screenshots\r\ndiffdir  = /tmp/specter\r\n```\r\n\r\n**testroot** is the folder that contains all the test files to run\r\n\r\n**baseline** is the directory in which baseline screen captures should be stored\r\n\r\n**diffdir** is where diff images are stored for comparison later\r\n\r\n\r\n## Questions?\r\n\r\nIf have other questions about Specter, what it does, how it works, or why, have\r\na look at the [FAQ](https://github.com/letsgetrandy/specter/wiki/FAQ), and if\r\nyou don't see the answers you're looking for there, contact me!\r\n\r\n\r\n## Notes\r\n\r\n_Relative paths in .specterrc files are relative to that file._\r\n\r\n_v-0.3 note: baselines made with v-0.2 are not compatible with v-0.3.\r\n\r\n_v-0.2 note: the \"specter\" section in the rc files has been replaced by \"paths\" and \"args\" sections._\r\n\r\n\r\n\r\n--------------------------------------\r\n\r\nCreated and maintained by [Randy Hunt](http://github.com/letsgetrandy)\r\n\r\nPortions of Specter were inspired by [PhantomCSS](https://github.com/Huddle/PhantomCSS),\r\nand by [SlimerJS](https://github.com/laurentj/slimerjs).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}