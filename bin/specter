#!/usr/bin/env python

import os
import subprocess
import sys
import time
import threading
import ConfigParser
import BaseHTTPServer
from SimpleHTTPServer import SimpleHTTPRequestHandler


EX_OK = 0
EX_SOFTWARE = 70


class MyHandler(SimpleHTTPRequestHandler):
    def log_message(self, format, *args):
        return


class TestServer(threading.Thread):

    def __init__(self, path):
        super(TestServer, self).__init__()
        self.path = path

    def stop(self):
        self.httpd.shutdown()

    def run(self):
        #start local web server
        os.chdir(self.path)
        HandlerClass = MyHandler
        HandlerClass.protocol_version = "HTTP/1.0"
        self.httpd = BaseHTTPServer.HTTPServer(('127.0.0.1', 5055), HandlerClass)
        self.httpd.serve_forever()


def resolve(path):
    if os.path.islink(path):
        path = os.path.join(os.path.dirname(path), os.readlink(path))
        return resolve(path)
    return path


def call_casper(script, config):
    cmd = ['casperjs']
    cmd.extend(config['phantom_args'])
    cmd.extend([
        '--specter-path=%s' % config['path'],
        '--baseline=%s' % config['baseline'],
        '--diffdir=%s' % config['diff'],
        '--faildir=%s' % config['fail'],
        script,
    ])
    cmd.extend(config['args'])
    return subprocess.Popen(cmd, cwd=config['testroot'])


PHANTOMJS_NATIVE_ARGS = [
    'cookies-file',
    'config',
    'debug',
    'disk-cache',
    'ignore-ssl-errors',
    'load-images',
    'load-plugins',
    'local-storage-path',
    'local-storage-quota',
    'local-to-remote-url-access',
    'max-disk-cache-size',
    'output-encoding',
    'proxy',
    'proxy-auth',
    'proxy-type',
    'remote-debugger-port',
    'remote-debugger-autorun',
    'script-encoding',
    'web-security',
]
SYS_ARGS = sys.argv[1:]

conf = {
        'testroot': '.',
        'baseline': './screenshots',
        'diff': '/tmp/specter/diff',
        'fail': '/tmp/specter/fail',
        'args': [],
        'phantom_args': [],
        'path': os.path.abspath(os.path.join(os.path.dirname(resolve(__file__)), '..')),
    }

rc_files = []
cwd = os.getcwd()
apath = cwd
while apath != '/':
    if os.path.isfile(os.path.join(apath, '.specterrc')):
        rc_files.append(os.path.join(apath, '.specterrc'))
    apath = os.path.dirname(apath)
if os.path.isfile(os.path.join(os.path.sep, 'etc', 'specterrc')):
    rc_files.append(os.path.join(os.path.sep, 'etc', 'specterrc'))

while rc_files:
    path = rc_files.pop()
    with open(path) as f:
        cp = ConfigParser.SafeConfigParser()
        cp.readfp(f)
        for k in conf.keys():
            try:
                conf[k] = cp.get('paths', k)
                if conf[k] != os.path.abspath(conf[k]):
                    conf[k] = os.path.join(
                            os.path.dirname(path),
                            conf[k]
                        )
            except ConfigParser.NoSectionError as err:
                pass
            except ConfigParser.NoOptionError as err:
                pass


for arg in SYS_ARGS:
    found = False
    for native in PHANTOMJS_NATIVE_ARGS:
        if arg.startswith('--%s' % native):
            conf['phantom_args'].append(arg)
            found = True
    if not found:
        path = os.path.abspath(arg)
        if path.find(conf['testroot']) == 0:
            conf['args'].append(path[len(conf['testroot']) + 1:])
        else:
            conf['args'].append(arg)

os.chdir(conf['testroot'])

# run functional tests and gather screenshots
p = call_casper(
        os.path.join(conf['path'], 'bin', 'testrunner.js'), conf)

sts = p.wait()

if sts == EX_OK:
    # compare the screen captures
    server = TestServer(os.path.join(conf['path'], 'resemble'))
    server.start()
    time.sleep(1)
    p = call_casper(
            os.path.join(conf['path'], 'bin', 'compare.js'), conf)
    sts = p.wait()
    server.stop()

sys.exit(sts)
